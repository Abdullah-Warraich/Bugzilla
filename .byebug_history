c
c\
c
c\
c
@project.update!(project_params)
@project.update(project_params)
c
@project.users
@project.Users
@project.User
@project
c
@project.update!(project_params)
project_params
c
project_params
c
project_params
c
project_params
@project.update!(project_params)
@project.update(project_params)
c
@project.c
@project.users
@project.project_users
@project.users
project_params
@project.project_users
@project,project_users
@project
c
ActiveRecord::RecordInvalid Exception: Validation failed: User projects project has already been takenc
@project.update!(project_params)
c
@project.update!(project_params)
c
@project.update!(project_params)
c
@project.update!(project_params)
c
@project.update!(project_params)
@project.update(project_params)
c
params
c
project_params
c
project_params
c
project_params
c
params
c
Project.where("lower(name) LIKE ?", "%" + Project.sanitize_sql_like(p.to_s.downcase.gsub(/\s+/, '')) + "%")
Project.where("lower(name) LIKE ?", "%" + Project.sanitize_sql_like(params[:searchTerm].to_s.downcase.gsub(/\s+/, '')) + "%")
c
link_to(name, '#', class: "add_fields " + args[:class], data: {id: id, fields: fields.gsub("\n", "")})
c
association.to_s.singularize
association
f.fields_for(association, new_object, child_index: id)
new_object.object_id
f.object.send(association).klass.new
puts "ali"
c
cc
c
fields
c
args[:class]
fields
c
builder
association.to_s.singularize
association
c
association.to_s.singularize
f.fields_for(association, new_object, child_index: id)
f.object.send(association).klass.new
args
association
f
name
c
args[:class]
args
link_to(name, '#', class: "add_fields " + args[:class], data: {id: id, fields: fields.gsub("\n", "")})
fields
c
f.fields_for(association, new_object, child_index: id) do |builder|
           render(association.to_s.singularize, f: builder)
   endc
f.fields_for(association, new_object, child_index: id) do |builder|
           render(association.to_s.singularize, f: builder)
   end
f.fields_for(association, new_object, child_index: id) do |builder|
    8:       render(association.to_s.singularize, f: builder)
    9:     end
link_to(name, '#', class: "add_fields " + args[:class], data: {id: id, fields: fields.gsub("\n", "")})
new_object = f.object.send(association).klass.new
f
new_object = f.object.send(association).klass.new
new_object.object_id
association
assocaition
new_object
f
name
